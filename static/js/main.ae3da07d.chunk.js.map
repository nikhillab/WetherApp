{"version":3,"sources":["components/fetchData.js","components/card.js","components/ComfortLevel.js","components/Wind.js","components/wetherData.js","components/wetherapi.js","App.js","serviceWorker.js","index.js"],"names":["getWeather","cityname","weathertype","axios","get","type","Number","apikey","origin","this","useStyles","makeStyles","theme","root","display","padding","details","flexDirection","content","flex","cover","width","controls","alignItems","paddingLeft","spacing","paddingBottom","playIcon","height","convertToCel","num","toFixed","DataCard","props","classes","icon","weatherData","weather","Card","className","CardActionArea","Typography","gutterBottom","variant","component","name","sys","country","CardContent","main","temp","color","description","temp_max","temp_min","CardMedia","image","title","ComfortLevel","clouds","all","feels_like","humidity","pressure","visibility","Wind","coord","lon","lat","wind","speed","deg","timezone","WetherData","WetherApi","state","error","getlatestData","FetchData","city","then","response","setState","data","catch","console","log","message","Component","App","searched","getLatestName","latestData","SubmitHandler","event","preventDefault","latestname","document","getElementById","value","Container","maxWidth","TextField","id","label","onChange","Button","endIcon","onClick","toLowerCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae3da07d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nclass FetchData {\r\n  constructor() {\r\n    this.apikey = \"3265874a2c77ae4a04bb96236a642d2f\";\r\n    this.type = [\"forecast\", \"weather\"];\r\n  }\r\n\r\n  getWeather = (cityname, weathertype) => {\r\n    return axios.get(\r\n      `https://api.openweathermap.org/data/2.5/${\r\n        this.type[Number(weathertype)]\r\n      }?q=${cityname}&appid=${this.apikey}`,\r\n      { origin: \"cors\" }\r\n    );\r\n  };\r\n}\r\n\r\nexport default new FetchData();\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"margin-top\": \"25px\",\r\n    padding:\"10px\"\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  content: {\r\n    flex: \"1 0 auto\",\r\n  },\r\n  cover: {\r\n    width: 120,\r\n  },\r\n  controls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  playIcon: {\r\n    height: 38,\r\n    width: 38,\r\n  },\r\n}));\r\n\r\nconst convertToCel = (num) => {\r\n  num = Number(num) - 273.15;\r\n  return num.toFixed(0.2);\r\n};\r\n\r\nexport default function DataCard(props) {\r\n  const classes = useStyles();\r\n  const icon = props.weatherData.weather[0].icon;\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <Typography gutterBottom variant='h5' component='h2'>\r\n          <b>{props.weatherData.name + \",\" + props.weatherData.sys.country + \"ðŸŒ¡\"}</b>\r\n        </Typography>\r\n        <div className={classes.details}>\r\n          <CardContent className={classes.content}>\r\n            <Typography gutterBottom variant='h5' component='h2'>\r\n              {convertToCel(props.weatherData.main.temp) + \"Â°C\"}\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n              <strong>\r\n                <b>{props.weatherData.weather[0].description}</b>\r\n              </strong>\r\n              <br />\r\n              {convertToCel(props.weatherData.main.temp_max) +\r\n                \"Â°/\" +\r\n                convertToCel(props.weatherData.main.temp_min) +\r\n                \"Â°\"}\r\n            </Typography>\r\n          </CardContent>\r\n        </div>\r\n      </CardActionArea>\r\n      <CardMedia\r\n        className={classes.cover}\r\n        image={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        title={props.weatherData.weather[0].main}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"margin-top\": \"25px\",\r\n    padding:\"10px\"\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  content: {\r\n    flex: \"1 0 auto\",\r\n  },\r\n  cover: {\r\n    height: 150,\r\n    width: 200,\r\n  },\r\n  controls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  playIcon: {\r\n    height: 38,\r\n    width: 38,\r\n  },\r\n}));\r\n\r\nconst convertToCel = (num) => {\r\n  num = Number(num) - 273.15;\r\n  return num.toFixed(0.2);\r\n};\r\n\r\nexport default function ComfortLevel(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardMedia\r\n        className={classes.cover}\r\n        image={\"https://icon-library.com/images/humid-icon/humid-icon-10.jpg\"}\r\n        title='humidity'\r\n      />\r\n      <CardActionArea>\r\n        <Typography gutterBottom variant='h5' component='h2'></Typography>\r\n        <div className={classes.details}>\r\n          <CardContent className={classes.content}>\r\n            <Typography gutterBottom variant='h6' component='h5'>\r\n              <b>Comfort Level</b>\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n              <strong>\r\n                {\" \"}\r\n                Clouds:{props.weatherData.clouds.all + \" %\"}\r\n                <br />\r\n                Feels Like: {convertToCel(props.weatherData.main.feels_like)}Â°C\r\n                <br />\r\n                Humidity: {props.weatherData.main.humidity} %<br />\r\n                Pressure: {props.weatherData.main.pressure} hPa\r\n                <br />\r\n                Visibility: {props.weatherData.visibility} meter\r\n                <br />\r\n              </strong>\r\n            </Typography>\r\n          </CardContent>\r\n        </div>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"margin-top\": \"20px\",\r\n    padding:\"10px\"\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  content: {\r\n    flex: \"1 0 auto\",\r\n  },\r\n  cover: {\r\n    height: 150,\r\n    width: 200,\r\n  },\r\n  controls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  playIcon: {\r\n    height: 38,\r\n    width: 38,\r\n  },\r\n}));\r\n\r\nexport default function Wind(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n     \r\n      <CardActionArea>\r\n        <Typography gutterBottom variant='h5' component='h2'></Typography>\r\n        <div className={classes.details}>\r\n          <CardContent className={classes.content}>\r\n            <Typography gutterBottom variant='h6' component='h5'>\r\n              <b>Wind</b> \r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n              <strong>\r\n                Longitude:{props.weatherData.coord.lon}\r\n                <br />\r\n                Latitude: {props.weatherData.coord.lat}\r\n                <br />\r\n                Wind Speed: {props.weatherData.wind.speed} meter/sec <br />\r\n                Wind Deg: {props.weatherData.wind.deg}Â°\r\n                <br />\r\n                TimeZone: {props.weatherData.timezone} UTC\r\n                <br />\r\n              </strong>\r\n            </Typography>\r\n          </CardContent>\r\n        </div>\r\n      </CardActionArea>\r\n      <CardMedia\r\n        className={classes.cover}\r\n        image={'https://cdn4.iconfinder.com/data/icons/buildings-79/64/123-512.png'}\r\n        title=\"humidity\"\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport DataCard from \"./card\";\r\nimport ComfortLevel from \"./ComfortLevel\";\r\nimport Wind from \"./Wind\";\r\n\r\nconst WetherData = (props) => {\r\n  return (\r\n    <>\r\n      <DataCard weatherData={props.weatherData} />\r\n      <ComfortLevel weatherData={props.weatherData} />\r\n      <Wind weatherData={props.weatherData} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WetherData;\r\n","import React, { Component } from \"react\";\r\nimport FetchData from \"./fetchData\";\r\nimport WetherData from \"./wetherData\";\r\n\r\nclass WetherApi extends Component {\r\n  state = {\r\n    error: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.state.weatherData) {\r\n      this.getlatestData();\r\n    }\r\n  }\r\n\r\n  getlatestData() {\r\n    FetchData.getWeather(this.props.city, 1)\r\n      .then((response) => {\r\n        this.setState({\r\n          weatherData: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n        this.setState({\r\n          error:error.message\r\n        })\r\n      });\r\n  }\r\n\r\n  render() {\r\n    // if (this.state.weatherData) {\r\n\r\n    //   console.log(this.state.weatherData)\r\n    // }\r\n    // // if(this.state.forecastData){\r\n    // //   console.log(this.state.forecastData)\r\n    // // }\r\n\r\n    return (\r\n      <>\r\n        {this.state.weatherData && (\r\n          <WetherData weatherData={this.state.weatherData} />\r\n        )}\r\n        <br/>\r\n        {this.state.error && <h3>{this.state.error}.Enter a valid Name</h3>}\r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WetherApi;\r\n","import React, { Component } from \"react\";\nimport WetherApi from \"./components/wetherapi\";\nimport \"./App.css\";\nimport { TextField, Button, Container } from \"@material-ui/core\";\n\nclass App extends Component {\n  state = {\n    name: \"\",\n    searched: false,\n  };\n\n  getLatestName = () => {\n    this.latestData();\n  };\n\n  SubmitHandler = (event) => {\n    event.preventDefault();\n    this.latestData();\n    this.setState({\n      searched: true,\n    });\n  };\n\n  latestData() {\n    let name = document.getElementById(\"outlined-basic\");\n    const latestname = name.value;\n    this.setState({ name: latestname });\n    this.setState({\n      searched: false,\n    });\n  }\n\n  render() {\n    return (\n      <Container maxWidth='sm'>\n      <div className='App'>\n        \n          <br />\n          <form>\n            <TextField\n              id='outlined-basic'\n              label='Enter City Name:'\n              variant='outlined'\n              value={this.state.name}\n              onChange={this.getLatestName}\n            />\n            <br />\n            <br />\n            <Button\n              variant='contained'\n              color='primary'\n              endIcon='ðŸ”Ž'\n              type='submit'\n              onClick={this.SubmitHandler}>\n              Search\n            </Button>\n          </form>\n          {this.state.searched && (\n            <WetherApi city={this.state.name.toLowerCase()} />\n          )}\n       \n      </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}